using System.Text.Json;
using System.Text.Json.Serialization;

namespace AgentChainingSample.Shared.Models;

/// <summary>
/// Request to initiate the news article generation workflow
/// </summary>
public class ContentCreationRequest
{
    /// <summary>
    /// News topic to research and write about
    /// </summary>
    public string Topic { get; set; } = string.Empty;

    /// <summary>
    /// Optional client request ID for tracking
    /// </summary>
    public string? RequestId { get; set; }

    /// <summary>
    /// Timestamp when the request was received
    /// </summary>
    public DateTime RequestTimestamp { get; set; } = DateTime.UtcNow;
}

/// <summary>
/// News article workflow result containing all agent outputs
/// </summary>
public class ContentWorkflowResult
{
    /// <summary>
    /// The original topic
    /// </summary>
    public string Topic { get; set; } = string.Empty;

    /// <summary>
    /// Research data from the Research Agent with Web Search
    /// </summary>
    public ResearchData ResearchData { get; set; } = new();

    /// <summary>
    /// Article content from the Content Generation Agent with Knowledge Files
    /// </summary>
    public string ArticleContent { get; set; } = string.Empty;

    /// <summary>
    /// Image details from the Image Generation Agent with DALL-E
    /// </summary>
    public List<GeneratedImage> GeneratedImages { get; set; } = new();

    /// <summary>
    /// Final article HTML content with images and proper formatting
    /// </summary>
    public string FinalArticle { get; set; } = string.Empty;
    
    /// <summary>
    /// Local file path where the HTML article is saved
    /// </summary>
    public string ArticleFilePath { get; set; } = string.Empty;
    
    /// <summary>
    /// URL to the article in blob storage (kept for compatibility, always empty)
    /// </summary>
    public string ArticleBlobUrl { get; set; } = string.Empty;

    /// <summary>
    /// Workflow completion timestamp
    /// </summary>
    public DateTime CompletedTimestamp { get; set; } = DateTime.UtcNow;
}

/// <summary>
/// Research data from web search
/// </summary>
public class ResearchData
{
    /// <summary>
    /// Key facts discovered during research
    /// </summary>
    [JsonPropertyName("facts")]
    public List<string> Facts { get; set; } = new();

    /// <summary>
    /// Relevant sources found during research
    /// </summary>
    [JsonPropertyName("sources")]
    public List<ResearchSource> Sources { get; set; } = new();

    /// <summary>
    /// Summary of research findings
    /// </summary>
    [JsonPropertyName("summary")]
    public string Summary { get; set; } = string.Empty;

    /// <summary>
    /// Suggested article angles
    /// </summary>
    [JsonPropertyName("articleAngles")]
    public List<string> ArticleAngles { get; set; } = new();

    /// <summary>
    /// Parses research data from JSON
    /// </summary>
    public static ResearchData FromJson(string json)
    {
        try
        {
            var result = JsonSerializer.Deserialize<ResearchData>(json, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });

            return result ?? new ResearchData();
        }
        catch
        {
            // Return empty research data if parsing fails
            return new ResearchData();
        }
    }
}

/// <summary>
/// Source information from research
/// </summary>
public class ResearchSource
{
    /// <summary>
    /// URL of the source
    /// </summary>
    [JsonPropertyName("url")]
    public string Url { get; set; } = string.Empty;

    /// <summary>
    /// Title of the source
    /// </summary>
    [JsonPropertyName("title")]
    public string Title { get; set; } = string.Empty;

    /// <summary>
    /// Brief description of the source content
    /// </summary>
    [JsonPropertyName("description")]
    public string Description { get; set; } = string.Empty;
}

/// <summary>
/// Image generated by DALL-E
/// </summary>
public class GeneratedImage
{
    /// <summary>
    /// Description of the image
    /// </summary>
    [JsonPropertyName("description")]
    public string Description { get; set; } = string.Empty;

    /// <summary>
    /// Prompt used to generate the image
    /// </summary>
    [JsonPropertyName("prompt")]
    public string Prompt { get; set; } = string.Empty;

    /// <summary>
    /// URL or Base64 representation of the image
    /// </summary>
    [JsonPropertyName("imageUrl")]
    public string ImageUrl { get; set; } = string.Empty;

    /// <summary>
    /// Caption for the image
    /// </summary>
    [JsonPropertyName("caption")]
    public string Caption { get; set; } = string.Empty;

    /// <summary>
    /// Parses generated image from JSON
    /// </summary>
    public static List<GeneratedImage> FromJson(string json)
    {
        try
        {
            var result = JsonSerializer.Deserialize<List<GeneratedImage>>(json, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });

            return result ?? new List<GeneratedImage>();
        }
        catch
        {
            // Return empty list if parsing fails
            return new List<GeneratedImage>();
        }
    }
}
